/* eslint-disable no-unused-vars */
import { useState, useEffect, useRef } from "react";
import { Link, useNavigate } from "react-router-dom";
import Chart from "react-apexcharts";
import {
  BarChart3,
  MoreVertical,
  MessageCircle,
  X,
  Clock,
  ChevronDown,
} from "lucide-react";
import Rectangle1 from "../../public/Rectangle 1.png";
import Image10 from "../../public/image10.png";
import Avatar from "../../public/avatar.png";

export default function MyArea() {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [isRightSidebarOpen, setIsRightSidebarOpen] = useState(false);
  const [openDropdownIndex, setOpenDropdownIndex] = useState(null);
  const [selectedMemberType, setSelectedMemberType] = useState("All members");
  const [isChartDropdownOpen, setIsChartDropdownOpen] = useState(false);
  const dropdownRef = useRef(null);
  const chartDropdownRef = useRef(null);
  const navigate = useNavigate();

  const memberTypes = {
    "All members": {
      data: [
        [50, 280, 200, 450, 250, 400, 300, 200, 450],
        [100, 150, 200, 100, 150, 300, 400, 100, 400],
      ],
      growth: "4%",
      title: "Members",
    },
    "Checked in": {
      data: [
        [30, 180, 150, 350, 200, 300, 250, 150, 350],
        [80, 120, 150, 80, 120, 250, 300, 80, 300],
      ],
      growth: "2%",
      title: "Checked In Members",
    },
    "Cancelled appointment": {
      data: [
        [20, 100, 50, 100, 50, 100, 50, 50, 100],
        [20, 30, 50, 20, 30, 50, 100, 20, 100],
      ],
      growth: "-1%",
      title: "Cancelled Appointments",
    },
  };

  const toggleSidebar = () => {
    setIsSidebarOpen(!isSidebarOpen);
  };

  const toggleRightSidebar = () => {
    setIsRightSidebarOpen(!isRightSidebarOpen);
  };

  const redirectToTodos = () => {
    navigate("/dashboard/to-do");
  };

  const redirectToCommunication = () => {
    navigate("/dashboard/communication");
  };

  const toggleDropdown = (index) => {
    setOpenDropdownIndex(openDropdownIndex === index ? null : index);
  };

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setOpenDropdownIndex(null);
      }
      if (
        chartDropdownRef.current &&
        !chartDropdownRef.current.contains(event.target)
      ) {
        setIsChartDropdownOpen(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, []);

  const chartOptions = {
    chart: {
      type: "line",
      height: 300,
      toolbar: {
        show: false,
      },
      background: "transparent",
      fontFamily: "Inter, sans-serif",
    },
    colors: ["#FF6B1A", "#2E5BFF"],
    stroke: {
      curve: "smooth",
      width: 4,
      opacity: 1,
    },
    markers: {
      size: 1,
      strokeWidth: 0,
      hover: {
        size: 6,
      },
    },
    xaxis: {
      categories: [
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec",
      ],
      labels: {
        style: {
          colors: "#999999",
          fontSize: "12px",
        },
      },
      axisBorder: {
        show: false,
      },
      axisTicks: {
        show: false,
      },
    },
    yaxis: {
      min: 0,
      max: 500,
      tickAmount: 5,
      labels: {
        style: {
          colors: "#999999",
          fontSize: "12px",
        },
        formatter: (value) => Math.round(value),
      },
    },
    grid: {
      show: true,
      borderColor: "#333333",
      position: "back",
      xaxis: {
        lines: {
          show: true,
        },
      },
      yaxis: {
        lines: {
          show: true,
        },
      },
      row: {
        opacity: 0.1,
      },
      column: {
        opacity: 0.1,
      },
    },
    legend: {
      show: true,
      position: "top",
      horizontalAlign: "right",
      offsetY: -60,
      offsetX: -200,
      labels: {
        colors: "#ffffff",
      },
      itemMargin: {
        horizontal: 10,
      },
    },
    title: {
      text: memberTypes[selectedMemberType].title,
      align: "left",
      style: {
        fontSize: "16px",
        fontWeight: "bold",
        color: "#ffffff",
      },
    },
    subtitle: {
      text: `â†‘ ${memberTypes[selectedMemberType].growth} more in 2024`,
      align: "left",
      style: {
        fontSize: "12px",
        color: "#ffffff",
        fontWeight: "bolder",
      },
    },
  };

  const chartSeries = [
    {
      name: "Comp1",
      data: memberTypes[selectedMemberType].data[0],
    },
    {
      name: "Comp2",
      data: memberTypes[selectedMemberType].data[1],
    },
  ];

  const [appointments, setAppointments] = useState([
    {
      name: "Yolanda",
      time: "10:00",
      date: "Mon | 02-01-2025",
      color: "bg-[#3F74FF]",
      status: "check-in",
      isCheckedIn: false,
    },
    {
      name: "Alexandra",
      time: "12:00",
      date: "Mon | 02-01-2025",
      color: "bg-[#CE4B55]",
      status: "check-out",
      isCheckedIn: false,
    },
  ]);

  const handleAction = (index, action) => {
    setAppointments((prevAppointments) => {
      const updatedAppointments = [...prevAppointments];
      updatedAppointments[index] = {
        ...updatedAppointments[index],
        isCheckedIn: !updatedAppointments[index].isCheckedIn,
      };
      return updatedAppointments;
    });
  };

  return (
    <div className="flex rounded-3xl bg-[#1C1C1C] text-white min-h-screen">
      {isRightSidebarOpen && (
        <div
          className="fixed inset-0 bg-black/50 z-40 lg:hidden"
          onClick={toggleRightSidebar}
        />
      )}
      <main className="flex-1 min-w-0 overflow-x-hidden">
        <div className="p-4 md:p-6">
          <div className="grid gap-4 md:gap-6">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <button
                  onClick={toggleSidebar}
                  className="p-2 text-zinc-400 hover:bg-zinc-800 rounded-lg md:hidden"
                >
                  <BarChart3 />
                </button>
                <h1 className="text-xl md:text-2xl oxanium_font">My Area</h1>
              </div>
              <button
                onClick={toggleRightSidebar}
                className="p-2 text-zinc-400 hover:bg-zinc-800 rounded-lg lg:hidden"
                aria-label="Toggle Messages"
              >
                {isRightSidebarOpen ? (
                  <X size={24} />
                ) : (
                  <MessageCircle size={24} />
                )}
              </button>
            </div>

            <div className="p-4 md:p-6 bg-[#2F2F2F] rounded-xl overflow-hidden">
              <div className="relative mb-4" ref={chartDropdownRef}>
                <button
                  onClick={() => setIsChartDropdownOpen(!isChartDropdownOpen)}
                  className="flex items-center gap-2 px-4 py-2 bg-black rounded-xl text-white text-sm"
                >
                  {selectedMemberType}
                  <ChevronDown className="w-4 h-4" />
                </button>
                {isChartDropdownOpen && (
                  <div className="absolute z-10 mt-2 w-48 bg-[#2F2F2F] rounded-xl shadow-lg">
                    {Object.keys(memberTypes).map((type) => (
                      <button
                        key={type}
                        className="block w-full text-left px-4 py-2 text-sm text-white hover:bg-black"
                        onClick={() => {
                          setSelectedMemberType(type);
                          setIsChartDropdownOpen(false);
                        }}
                      >
                        {type}
                      </button>
                    ))}
                  </div>
                )}
              </div>
              <div className="w-full overflow-x-auto custom-scrollbar">
                <div className="min-w-[800px]">
                  <Chart
                    options={chartOptions}
                    series={chartSeries}
                    type="line"
                    height={300}
                  />
                </div>
              </div>
            </div>

            <div>
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-lg md:text-xl open_sans_font_700">
                  Upcoming Appointments
                </h2>
                <Link
                  to={"/dashboard/appointments"}
                  className="cursor-pointer hover:underline font-medium"
                >
                  See all
                </Link>
              </div>
              <div className="space-y-4">
                {appointments.map((appointment, index) => (
                  <div
                    key={index}
                    className={`${appointment.color} p-3 md:p-4 open_sans_font rounded-xl flex flex-col sm:flex-row sm:items-center justify-between gap-3 relative`}
                  >
                    <div className="flex items-center gap-3">
                      <div className="w-10 h-10 md:w-12 md:h-12 rounded-full flex items-center justify-center">
                        <img
                          src={Avatar || "/placeholder.svg"}
                          alt=""
                          className="w-full h-full object-cover rounded-full"
                        />
                      </div>
                      <div>
                        <h3 className="font-semibold text-sm md:text-base">
                          {appointment.name}
                        </h3>
                        <p className="text-xs flex gap-1 items-center md:text-sm text-white/70">
                          <Clock size={15} />
                          {appointment.time} | {appointment.date}
                        </p>
                      </div>
                    </div>

                    <div className="flex items-center gap-2 ml-auto">
                      <button
                        onClick={() => handleAction(index, appointment.status)}
                        className={`px-5 py-1.5 cursor-pointer ${
                          appointment.isCheckedIn ? "bg-green-600" : "bg-black"
                        } text-white text-xs md:text-sm rounded-xl cursor-pointer transition-colors min-w-[80px]`}
                      >
                        {appointment.isCheckedIn
                          ? appointment.status === "check-in"
                            ? "Checked In"
                            : "Checked Out"
                          : appointment.status === "check-in"
                          ? "Check In"
                          : "Check Out"}
                      </button>
                      <div className="relative" ref={dropdownRef}>
                        <button
                          className="p-2 hover:bg-white/10 rounded-xl"
                          onClick={() => toggleDropdown(index)}
                        >
                          <MoreVertical size={18} className="cursor-pointer" />
                        </button>
                        {openDropdownIndex === index && (
                          <div className="absolute right-4 top-4 mt-2 w-32 bg-[#2F2F2F]/10 backdrop-blur-xl rounded-xl z-10">
                            <ul className="py-1">
                              <li>
                                <button
                                  className="block w-full text-left px-4 py-2 text-sm text-white cursor-pointer hover:bg-white/10"
                                  onClick={() => {
                                    console.log("Cancel appointment");
                                    setOpenDropdownIndex(null);
                                  }}
                                >
                                  Cancel
                                </button>
                              </li>
                              <div className="h-[1px] bg-[#BCBBBB] w-[85%] mx-auto"></div>
                              <li>
                                <button
                                  className="block w-full text-left px-4 py-2 text-sm text-red-500 cursor-pointer hover:bg-white/10"
                                  onClick={() => {
                                    console.log("Remove appointment");
                                    setOpenDropdownIndex(null);
                                  }}
                                >
                                  Remove
                                </button>
                              </li>
                            </ul>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </main>

      <aside
        className={`
        fixed top-0 right-0 bottom-0 w-[85vw] sm:w-80 lg:w-80 bg-[#181818] z-50 
        lg:static lg:block overflow-y-auto
        ${
          isRightSidebarOpen
            ? "translate-x-0"
            : "translate-x-full lg:translate-x-0"
        }
        transition-transform duration-500 ease-in-out
      `}
      >
        <div className="p-4 md:p-6 min-h-full">
          <button
            onClick={() => setIsRightSidebarOpen(false)}
            className="absolute top-4 left-4 p-2 text-zinc-400 hover:bg-zinc-700 rounded-xl lg:hidden"
            aria-label="Close Messages"
          >
            <X size={20} />
          </button>

          <div className="mb-8 mt-8 lg:mt-0">
            <div className="flex items-center justify-between mb-4">
              <h2
                className="text-lg md:text-xl open_sans_font_700 cursor-pointer"
                onClick={redirectToCommunication}
              >
                Communications
              </h2>
            </div>
            <div className="space-y-4">
              {[1, 2].map((message) => (
                <div
                  onClick={redirectToCommunication}
                  key={message}
                  className="p-3 md:p-4 cursor-pointer bg-black rounded-xl"
                >
                  <div className="flex items-center gap-3 mb-2">
                    <img
                      src={Rectangle1 || "/placeholder.svg"}
                      alt="User"
                      className="rounded-full h-10 w-10 md:h-12 md:w-12"
                    />
                    <div>
                      <h3 className="open_sans_font text-sm md:text-base">
                        Jennifer Markus
                      </h3>
                    </div>
                  </div>
                  <div>
                    <p className="text-xs md:text-sm open_sans_font text-zinc-400">
                      Hey! Did you think the NFT marketplace for Alice app
                      design?
                    </p>
                    <p className="text-xs mt-2 flex gap-1 items-center open_sans_font text-zinc-400">
                      <Clock size={15} />
                      Today | 05:30 PM
                    </p>
                  </div>
                </div>
              ))}
              <Link
                to={"/dashboard/communication"}
                className="text-sm md:text-md open_sans_font text-white flex justify-center items-center text-center hover:underline"
              >
                See all
              </Link>
            </div>
          </div>

          <div>
            <h2
              className="text-lg open_sans_font md:text-xl open_sans_font_700 cursor-pointer mb-4"
              onClick={redirectToTodos}
            >
              TO-DO
            </h2>
            <div className="space-y-4 open_sans_font">
              {[1, 2, 3].map((task) => (
                <div
                  onClick={redirectToTodos}
                  key={task}
                  className="p-3 md:p-4 cursor-pointer bg-black rounded-xl flex items-center justify-between"
                >
                  <div>
                    <h3 className="font-semibold open_sans_font text-sm md:text-base">
                      Task
                    </h3>
                    <p className="text-xs open_sans_font md:text-sm text-zinc-400">
                      Description
                    </p>
                  </div>
                  <button className="px-4 md:px-6 py-1.5 flex justify-center items-center gap-2 bg-blue-600 text-white rounded-xl text-xs md:text-sm">
                    <img
                      src={Image10 || "/placeholder.svg"}
                      alt=""
                      className="w-4 h-4"
                    />
                    Jack
                  </button>
                </div>
              ))}

              <Link
                to={"/dashboard/to-do"}
                className="text-sm md:text-md open_sans_font text-white flex justify-center items-center text-center hover:underline"
              >
                See all
              </Link>
            </div>
          </div>
        </div>
      </aside>
    </div>
  );
}