/* eslint-disable no-unused-vars */
import React, { useState, useEffect } from "react";
import { MoreHorizontal, X, Clock, ChevronDown } from "lucide-react";
import Avatar from "../../public/avatar.png";
import toast, { Toaster } from "react-hot-toast";
import moment from "moment";
import { Calendar as BigCalendar, momentLocalizer } from "react-big-calendar";
import "react-big-calendar/lib/css/react-big-calendar.css";

const localizer = momentLocalizer(moment);

const Appointments = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [activeDropdownId, setActiveDropdownId] = useState(null);
  const [view, setView] = useState("week");
  const [isViewDropdownOpen, setIsViewDropdownOpen] = useState(false);
  const [checkedInMembers, setCheckedInMembers] = useState([]);
  const [selectedAppointment, setSelectedAppointment] = useState(null);
  const [isRemoveModalOpen, setIsRemoveModalOpen] = useState(false);
  const [appointmentToRemove, setAppointmentToRemove] = useState(null);
  const [appointments, setAppointments] = useState([
    {
      id: 1,
      name: "Yolanda",
      start: new Date(2025, 1, 2, 10, 0), // Date object for start time
      end: new Date(2025, 1, 2, 14, 0), // Date object for end time
      color: "#4169E1",
      type: "Strength Training",
      note: "Prefers morning sessions",
    },
    {
      id: 2,
      name: "Alexandra",
      start: new Date(2025, 1, 3, 10, 0),
      end: new Date(2025, 1, 3, 18, 0),
      color: "#FF6B6B",
      type: "Cardio",
      note: "",
    },
    {
      id: 3,
      name: "Marcus",
      start: new Date(2025, 1, 4, 14, 0),
      end: new Date(2025, 1, 4, 16, 0),
      color: "#50C878",
      type: "Yoga",
      note: "",
    },
    {
      id: 4,
      name: "John",
      start: new Date(2025, 1, 4, 14, 0),
      end: new Date(2025, 1, 4, 16, 0),
      color: "#50C878",
      type: "Yoga",
      note: "",
    },
  ]);

  useEffect(() => {
    const handleClickOutside = () => {
      setActiveDropdownId(null);
      setIsViewDropdownOpen(false);
    };
    document.addEventListener("click", handleClickOutside);
    return () => document.removeEventListener("click", handleClickOutside);
  }, []);

  const handleCheckIn = (id) => {
    if (checkedInMembers.includes(id)) {
      setCheckedInMembers(checkedInMembers.filter((memberId) => memberId !== id));
      toast.success("Member checked out successfully");
    } else {
      setCheckedInMembers([...checkedInMembers, id]);
      toast.success("Member checked in successfully");
    }
  };

  const handleAppointmentClick = (appointment) => {
    setSelectedAppointment(appointment);
  };

  const handleAppointmentChange = (changes) => {
    const updatedAppointment = { ...selectedAppointment, ...changes };
    const updatedAppointments = appointments.map((app) =>
      app.id === updatedAppointment.id ? updatedAppointment : app
    );
    setAppointments(updatedAppointments);
    setSelectedAppointment(null);
    toast.success("Appointment updated successfully");
  };

  const handleRemoveAppointment = (appointment) => {
    setAppointmentToRemove(appointment);
    setIsRemoveModalOpen(true);
    setActiveDropdownId(null);
  };

  const confirmRemoveAppointment = () => {
    setAppointments(appointments.filter((app) => app.id !== appointmentToRemove.id));
    setIsRemoveModalOpen(false);
    setAppointmentToRemove(null);
    toast.success("Appointment removed successfully");
  };

  const ViewSelector = () => (
    <div className="relative" onClick={(e) => e.stopPropagation()}>
      <button
        onClick={() => setIsViewDropdownOpen(!isViewDropdownOpen)}
        className="bg-[#000000] text-white px-4 py-2 rounded-xl cursor-pointer text-sm font-medium transition-colors duration-500 flex items-center gap-2"
      >
        {view.charAt(0).toUpperCase() + view.slice(1)} View
        <ChevronDown size={16} />
      </button>

      {isViewDropdownOpen && (
        <div className="absolute top-full mt-1 right-0 w-32 bg-[#1C1C1C]/30 backdrop-blur-3xl rounded-lg border border-gray-800 shadow-lg overflow-hidden z-10">
          {["day", "week", "month"].map((v) => (
            <button
              key={v}
              className="w-full px-4 py-2 text-sm cursor-pointer text-white hover:bg-gray-800 text-left capitalize"
              onClick={() => {
                setView(v);
                setIsViewDropdownOpen(false);
              }}
            >
              {v} View
            </button>
          ))}
        </div>
      )}
    </div>
  );

  return (
    <div className="flex rounded-3xl bg-[#1C1C1C] p-6">
      <main className="flex-1 min-w-0">
        <div className="max-w-7xl mx-auto">
          <div className="flex justify-between items-center mb-6">
            <h1 className="text-xl oxanium_font sm:text-2xl font-bold text-white">Appointments</h1>
            <div className="flex items-center gap-2">
              <ViewSelector />
              <button
                onClick={() => setIsModalOpen(true)}
                className="bg-[#FF843E] text-white px-4 py-2 rounded-xl text-sm font-medium hover:bg-[#FF843E]/90 transition-colors duration-200"
              >
                + Add appointment
              </button>
            </div>
          </div>

          <div className="flex flex-col lg:flex-row gap-6">
            <div className="lg:w-[50%] w-full space-y-6">
              <div>
                <h2 className="text-white font-bold mb-4">Upcoming Appointments</h2>
                <div className="space-y-3 custom-scrollbar overflow-y-auto max-h-[70vh]">
                  {appointments.map((appointment) => (
                    <div
                      key={appointment.id}
                      className="rounded-xl p-4 flex items-center justify-between"
                      style={{ backgroundColor: appointment.color }}
                      onClick={() => handleAppointmentClick(appointment)}
                    >
                      <div className="flex items-center gap-3">
                        <div className="w-8 h-8 rounded-full bg-white/20 flex items-center justify-center">
                          <img src={Avatar} alt="" className="w-full h-full rounded-full" />
                        </div>
                        <div className="text-white">
                          <p className="font-semibold">{appointment.name}</p>
                          <p className="text-sm flex gap-1 items-center opacity-80">
                            <Clock size={15} />
                            {moment(appointment.start).format("HH:mm")} | {moment(appointment.start).format("ddd | MM-DD-YYYY")}
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center gap-2">
                        <button
                          onClick={(e) => {
                            e.stopPropagation();
                            handleCheckIn(appointment.id);
                          }}
                          className="px-3 py-1 rounded-lg text-sm bg-black text-white hover:bg-black/80 transition-colors"
                        >
                          {checkedInMembers.includes(appointment.id) ? "Check Out" : "Check In"}
                        </button>
                        <div className="relative">
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              setActiveDropdownId(activeDropdownId === appointment.id ? null : appointment.id);
                            }}
                            className="text-white/80 hover:text-white"
                          >
                            <MoreHorizontal size={20} />
                          </button>

                          {activeDropdownId === appointment.id && (
                            <div className="absolute right-0 mt-1 w-32 bg-[#1C1C1C] rounded-lg border border-gray-800 shadow-lg overflow-hidden z-10">
                              <button
                                className="w-full px-4 py-2 text-sm text-white hover:bg-gray-800 text-left"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  handleAppointmentClick(appointment);
                                }}
                              >
                                Edit
                              </button>
                              <div className="h-[1px] bg-gray-800 w-full"></div>
                              <button
                                className="w-full px-4 py-2 text-sm text-red-500 hover:bg-gray-800 text-left"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  handleRemoveAppointment(appointment);
                                }}
                              >
                                Remove
                              </button>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            <div className="w-full bg-[#000000] rounded-xl p-4 overflow-hidden">
              <BigCalendar
                localizer={localizer}
                events={appointments}
                startAccessor="start"
                endAccessor="end"
                style={{ height: 600 }}
                views={["month", "week", "day"]}
                defaultView="week"
                onView={(view) => setView(view)}
                selectable
                onSelectEvent={(event) => handleAppointmentClick(event)}
                eventPropGetter={(event) => ({
                  style: { backgroundColor: event.color },
                })}
              />
            </div>
          </div>
        </div>
      </main>

      {isModalOpen && (
        <div
          className="fixed inset-0 bg-black/50 flex items-center justify-center z-[1000] p-4"
          onClick={() => setIsModalOpen(false)}
        >
          <div
            className="bg-[#181818] w-[90%] sm:w-[480px] rounded-xl overflow-hidden"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="px-6 py-4 border-b border-gray-800 flex justify-between items-center">
              <h2 className="text-lg font-semibold text-white">Add appointment</h2>
              <button
                onClick={() => setIsModalOpen(false)}
                className="text-gray-400 hover:text-white p-2 hover:bg-gray-800 rounded-lg"
              >
                <X size={20} />
              </button>
            </div>

            <div className="p-6 max-h-[calc(100vh-180px)] overflow-y-auto">
              <form className="space-y-4">
                <div className="space-y-1.5">
                  <label className="text-sm text-gray-200">Member</label>
                  <input
                    type="text"
                    placeholder="Search member..."
                    className="w-full bg-[#101010] text-sm rounded-xl px-3 py-2.5 text-white placeholder-gray-500 outline-none focus:ring-2 focus:ring-[#3F74FF]"
                  />
                </div>

                <div className="space-y-1.5">
                  <label className="text-sm text-gray-200">Appointment Type</label>
                  <select className="w-full bg-[#101010] text-sm rounded-xl px-3 py-2.5 text-white outline-none focus:ring-2 focus:ring-[#3F74FF]">
                    <option value="">Select type</option>
                    <option value="Strength Training">Strength Training</option>
                    <option value="Cardio">Cardio</option>
                    <option value="Yoga">Yoga</option>
                  </select>
                </div>

                <div className="space-y-1.5">
                  <label className="text-sm text-gray-200">Date & Time</label>
                  <input
                    type="datetime-local"
                    className="w-full bg-[#101010] text-sm rounded-xl px-3 py-2.5 text-white outline-none focus:ring-2 focus:ring-[#3F74FF]"
                  />
                </div>

                <div className="space-y-1.5">
                  <label className="text-sm text-gray-200">Duration (minutes)</label>
                  <input
                    type="number"
                    placeholder="60"
                    className="w-full bg-[#101010] text-sm rounded-xl px-3 py-2.5 text-white placeholder-gray-500 outline-none focus:ring-2 focus:ring-[#3F74FF]"
                  />
                </div>
              </form>
            </div>

            <div className="px-6 py-4 border-t border-gray-800 flex flex-col-reverse sm:flex-row gap-2">
              <button
                type="submit"
                className="w-full sm:w-auto px-5 py-2.5 bg-[#3F74FF] text-sm font-medium text-white rounded-xl hover:bg-[#3F74FF]/90 transition-colors"
              >
                Save
              </button>
              <button
                type="button"
                onClick={() => setIsModalOpen(false)}
                className="w-full sm:w-auto px-5 py-2.5 bg-black text-red-500 border-2 border-slate-500 rounded-xl text-sm font-medium hover:bg-slate-900 transition-colors"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}

      {selectedAppointment && (
        <div
          className="fixed inset-0 bg-black/50 flex items-center justify-center z-[1000] p-4"
          onClick={() => setSelectedAppointment(null)}
        >
          <div
            className="bg-[#181818] w-[90%] sm:w-[480px] rounded-xl overflow-hidden"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="px-6 py-4 border-b border-gray-800 flex justify-between items-center">
              <h2 className="text-lg font-semibold text-white">Edit Appointment</h2>
              <button
                onClick={() => setSelectedAppointment(null)}
                className="text-gray-400 hover:text-white p-2 hover:bg-gray-800 rounded-lg"
              >
                <X size={20} />
              </button>
            </div>

            <div className="p-6 max-h-[calc(100vh-180px)] overflow-y-auto">
              <form className="space-y-4">
                <div className="space-y-1.5">
                  <label className="text-sm text-gray-200">Member</label>
                  <input
                    type="text"
                    value={selectedAppointment.name}
                    readOnly
                    className="w-full bg-[#101010] text-sm rounded-xl px-3 py-2.5 text-white outline-none focus:ring-2 focus:ring-[#3F74FF]"
                  />
                </div>

                <div className="space-y-1.5">
                  <label className="text-sm text-gray-200">Appointment Type</label>
                  <select
                    value={selectedAppointment.type}
                    onChange={(e) => handleAppointmentChange({ type: e.target.value })}
                    className="w-full bg-[#101010] text-sm rounded-xl px-3 py-2.5 text-white outline-none focus:ring-2 focus:ring-[#3F74FF]"
                  >
                    <option value="Strength Training">Strength Training</option>
                    <option value="Cardio">Cardio</option>
                    <option value="Yoga">Yoga</option>
                  </select>
                </div>

                <div className="space-y-1.5">
                  <label className="text-sm text-gray-200">Date & Time</label>
                  <input
                    type="datetime-local"
                    value={moment(selectedAppointment.start).format("YYYY-MM-DDTHH:mm")}
                    onChange={(e) =>
                      handleAppointmentChange({
                        start: new Date(e.target.value),
                        end: new Date(moment(e.target.value).add(2, "hours")),
                      })
                    }
                    className="w-full bg-[#101010] text-sm rounded-xl px-3 py-2.5 text-white outline-none focus:ring-2 focus:ring-[#3F74FF]"
                  />
                </div>

                <div className="space-y-1.5">
                  <label className="text-sm text-gray-200">Note</label>
                  <textarea
                    value={selectedAppointment.note}
                    onChange={(e) => handleAppointmentChange({ note: e.target.value })}
                    className="w-full bg-[#101010] text-sm rounded-xl px-3 py-2.5 text-white outline-none focus:ring-2 focus:ring-[#3F74FF] min-h-[100px]"
                  />
                </div>
              </form>
            </div>

            <div className="px-6 py-4 border-t border-gray-800 flex flex-col-reverse sm:flex-row gap-2">
              <button
                onClick={() => {
                  handleAppointmentChange({});
                  setSelectedAppointment(null);
                }}
                className="w-full sm:w-auto px-5 py-2.5 bg-[#3F74FF] text-sm font-medium text-white rounded-xl hover:bg-[#3F74FF]/90 transition-colors"
              >
                Save Changes
              </button>
              <button
                onClick={() => setSelectedAppointment(null)}
                className="w-full sm:w-auto px-5 py-2.5 bg-black text-red-500 border-2 border-slate-500 rounded-xl text-sm font-medium hover:bg-slate-900 transition-colors"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}


      {isRemoveModalOpen && (
        <div
          className="fixed inset-0 bg-black/50 flex items-center justify-center z-[1000] p-4"
          onClick={() => setIsRemoveModalOpen(false)}
        >
          <div
            className="bg-[#181818] w-[90%] sm:w-[480px] rounded-xl overflow-hidden"
            onClick={(e) => e.stopPropagation()}
          >
            <div className="px-6 py-4 border-b border-gray-800 flex justify-between items-center">
              <h2 className="text-lg font-semibold text-white">Confirm Removal</h2>
              <button
                onClick={() => setIsRemoveModalOpen(false)}
                className="text-gray-400 hover:text-white p-2 hover:bg-gray-800 rounded-lg"
              >
                <X size={20} />
              </button>
            </div>

            <div className="p-6">
              <p className="text-white text-sm">
                Are you sure you want to remove this appointment with {appointmentToRemove?.name}?
              </p>
            </div>

            <div className="px-6 py-4 border-t border-gray-800 flex flex-col-reverse sm:flex-row gap-2">
              <button
                onClick={confirmRemoveAppointment}
                className="w-full sm:w-auto px-5 py-2.5 bg-red-600 text-sm font-medium text-white rounded-xl hover:bg-red-700 transition-colors"
              >
                Yes, Remove
              </button>
              <button
                onClick={() => setIsRemoveModalOpen(false)}
                className="w-full sm:w-auto px-5 py-2.5 bg-gray-800 text-sm font-medium text-white rounded-xl hover:bg-gray-700 transition-colors"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}

      <Toaster
        position="top-right"
        toastOptions={{
          duration: 2000,
          style: {
            background: '#333',
            color: '#fff',
          },
        }}
      />
    </div>
  )
}

export default Appointments